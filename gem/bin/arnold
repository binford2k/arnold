#! /usr/bin/env ruby

require 'rubygems'
require 'fileutils'
require 'yaml'
require 'optparse'
require 'pathname'

require 'arnold/node'
require 'arnold/node_manager'
require 'arnold/monkeypatch'
require 'arnold/controller'

cmdlineopts = {}
optparse = OptionParser.new { |opts|
    opts.banner = "Usage : arnold [-c <confdir>] [-d]

        Runs the arnold daemon.

"

    opts.on("-b", "--backend BACKEND", "Choose an alternate provisioning backend.") do |opt|
        cmdlineopts[:backend] = opt
    end

    opts.on("-c CONFIG", "--config CONFIG", "Choose an alternate config file. Defaults to /etc/arnold/config.yaml") do |opt|
        configfile = opt
    end

    opts.on("-d", "--debug", "Run in the foreground and display debugging messages") do
        # Separate options so daemonize = false doesn't force debug
        cmdlineopts[:debug]     = true
        cmdlineopts[:daemonize] = false
    end

    opts.separator('')

    opts.on("-h", "--help", "Displays this help") do
        puts opts
        exit
    end
}
optparse.parse!

# Load configuration data, deferring to command line overrides
configfile ||= '/etc/arnold/config.yaml'

begin
  $CONFIG = YAML.load_file(configfile)
rescue Errno::ENOENT => e
  puts "Config file doesn't exist; loading defaults! (#{e})" if cmdlineopts[:debug]
  $CONFIG={}
end
$CONFIG.merge!(cmdlineopts)

# finally, apply defaults to any unset options
$CONFIG[:docroot]    ||= File.dirname(__FILE__) + '/../' # well isn't this ugly
$CONFIG[:backend]    ||= 'Null'
$CONFIG[:datadir]    ||= '/etc/arnold/data'
$CONFIG[:sslcert]    ||= '/etc/arnold/certs/server.crt'
$CONFIG[:sslkey]     ||= '/etc/arnold/certs/server.key'
$CONFIG[:port]       ||= 9090
$CONFIG[:enc_server] ||= 'localhost'
$CONFIG[:enc_port]   ||= 443
$CONFIG[:enc_user]   ||= 'console'

begin
  # load up our provisioning backend
  require "arnold/provisioner/#{$CONFIG[:backend].to_underscore}"
  $CONFIG[:provisioner] = Arnold::Provisioner::const_get($CONFIG[:backend]).new
rescue LoadError, NameError => e
  puts "No such provisioning backend, loading null backend! (#{e})"
  require 'arnold/provisioner/null'
  $CONFIG[:provisioner] = Arnold::Provisioner::Null.new
end

case ARGV[0]
when 'serve'
  Arnold::Controller::Web.new

else
  Arnold::Controller::Cli.new(ARGV)

end